diff --git a/README.md b/README.md
index 50c819bff702c7d24aeb08fbf07777153e0057ec..cd5f634f219399196ad783495875672dfc9d1ca7 100644
--- a/README.md
+++ b/README.md
@@ -1,41 +1,41 @@
 ## Decl Audio
 
 **Decl** is a modular, tag-driven audio engine designed to *decouple* sound logic from game logic. Instead of embedding playback code in gameplay scripts, Decl listens to the world state‚Äîtags, values, events‚Äîand reacts accordingly. Sound becomes a system that describes behavior, not one that gets micromanaged.
 
 This means minimal audio logic in game code: just keep the sound engine updated with what's happening in the world. Decl handles the rest.
 
 ---
 
 ### Core Idea: Audio as Reaction to State
 
 In a typical integration, your game loop sends state updates like:
 
 ```cpp
-SoundManager::SetTag(entityId, "entity.player");
-SoundManager::SetGlobalValue(entityId, "speed", 4.3f);
-SoundManager::SetTransient(entityId, "foot.contact.left");
+AudioManager_SetTag(entityId, "entity.player");
+AudioManager_SetFloatValue(entityId, "speed", 4.3f);
+AudioManager_SetTransientTag(entityId, "foot.contact.left");
 ```
 
 The `.audio` files define behavior reactively:
 
 ```yaml
 # Base ambient weather event
 t- id: weather_base.audio
   matchTags:
     - ambience.weather
   soundNode:
     layer:
       sounds:
         - base_ambience.wav
   volume: 1.0
 
 # Rain variant
 - id: weather_rain.audio
   inherit: weather_base.audio
   matchTags:
     - ambience.weather.rain
   overrides:
     soundNode:
       layer:
         sounds:
           - base_ambience.wav
@@ -102,28 +102,57 @@ No hardcoded decisions in game code. Just describe state‚ÄîDecl figures out the
 ---
 
 ### üîç Features
 
 * **Declarative `.audio` event format**
   Describe playback logic in structured YAML-like text files‚Äîno scripting required for common sound behaviors.
 
 * **Logic nodes**
   Includes `play`, `random`, `layer`, `sequence`, `loop`, and more‚Äîchainable and nestable.
 
 * **Expressions**
   Full support for mathematical expressions, conditionals, and logic inside parameter values.
 
 * **Inheritance**
   Base events can be extended or selectively overridden by variants.
 
 * **Entity/Tag-based routing**
   Sound behavior is driven by tags and world state‚Äîminimal coupling to gameplay code.
 
 * **Minimal API footprint**
   Push values and tags‚ÄîDecl resolves all logic and playback internally.
 
 * **Spatialization-ready**
   Position and listener data routed via entity tags and metadata‚Äîno engine-specific calls needed.
 
+### API Functions
+
+The engine exposes a compact C interface. After creating the manager you mostly
+push tags and values to drive playback:
+
+````c
+void AudioManager_Create(AudioConfig* cfg);
+void AudioManager_Destroy();
+void AudioManager_LoadBehaviorsFromFile(const char* behaviorPath,
+                                        const char* assetPath);
+
+void AudioManager_SetTag(const char* entityId, const char* tag);
+void AudioManager_SetTransientTag(const char* entityId, const char* tag);
+void AudioManager_ClearTag(const char* entityId, const char* tag);
+
+void AudioManager_SetFloatValue(const char* entityId, const char* key, float value);
+void AudioManager_SetStringValue(const char* entityId, const char* key,
+                                 const char* value);
+void AudioManager_SetVectorValue(const char* entityId, const char* key,
+                                 float x, float y, float z);
+void AudioManager_ClearValue(const char* entityId, const char* key);
+void AudioManager_ClearEntity(const char* entityId);
+
+void AudioManager_LogSetMinimumLevel(LogCategory category, LogLevel level);
+void AudioManager_SetLogCallback(LogCallbackFn cb);
+bool AudioManager_PollLog(int* outCat, int* outLvl, char* outMsg, int maxLen);
+
+````
+
 ---
 
 More examples, integration guides, and tooling coming soon.
